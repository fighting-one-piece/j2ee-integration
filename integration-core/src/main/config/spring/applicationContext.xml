<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans classpath:/org/springframework/beans/factory/xml/spring-beans-3.1.xsd
						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
						http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
						http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd" default-autowire="byName">
	
	<!-- 注解配置  <context:annotation-config />-->
	<context:component-scan base-package="org.platform">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Component"/>
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>  
	</context:component-scan>
	  
	<!-- 加载文件配置 -->
	<context:property-placeholder location="classpath*:mail/mail.properties" ignore-unresolvable="true"/>
	<context:property-placeholder location="classpath*:shiro/shiro.properties" ignore-unresolvable="true"/>
	<context:property-placeholder location="classpath*:database/database.properties" ignore-unresolvable="true"/>
	<context:property-placeholder location="classpath*:hibernate/hibernate.properties" ignore-unresolvable="true"/>
	<context:property-placeholder location="classpath*:cassandra/cassandra.properties" ignore-unresolvable="true"/>
	
	<!-- 
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:mail/mail.properties</value>
				<value>classpath*:database/database.properties</value>
				<value>classpath*:hibernate/hibernate.properties</value>
			</list>
		</property>
	</bean>
	 -->
	
	<!-- 数据源配置 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${driverClassName}"></property> 
		<property name="url" value="${url}"></property> 
		<property name="username" value="${username}"></property> 
		<property name="password" value="${password}"></property> 
		<property name="initialSize" value="${dbcp.initialSize}"></property> 
		<property name="maxActive" value="${dbcp.maxActive}"></property> 
		<property name="maxIdle" value="${dbcp.maxIdle}"></property> 
		<property name="minIdle" value="${dbcp.minIdle}"></property> 
		<property name="maxWait" value="${dbcp.maxWait}"></property> 
		<property name="removeAbandoned" value="${dbcp.removeAbandoned}"></property> 
		<property name="defaultAutoCommit" value="${dbcp.defaultAutoCommit}"></property> 
		<property name="removeAbandonedTimeout" value="${dbcp.removeAbandonedTimeout}"></property> 
	</bean> 
	
	<!-- PROXOOL数据源配置 -->
	<bean id="dataSourceProxoolCP" class="org.platform.utils.database.ds.DataSourceFactoryBean">
		<property name="dataSourceType" value="${datasource.dataSourceType}" />
		<property name="driver" value="${driverClassName}" />
		<property name="driverUrl" value="${url}" />
		<property name="user" value="${username}" />
		<property name="password" value="${password}" />
		<property name="alias" value="${proxool.alias}" />
		<property name="maximumConnectionCount" value="${proxool.maximumConnectionCount}" />
		<property name="minimumConnectionCount" value="${proxool.minimumConnectionCount}" />
		<property name="maximumActiveTime" value="${proxool.maximumActiveTime}" />
		<property name="simultaneousBuildThrottle" value="${proxool.simultaneousBuildThrottle}" />
		<property name="delegateProperties" value="user=${username},password=${password}" />
	</bean>

	<!-- BONECP数据源配置 -->
	<bean id="dataSourceBoneCP" class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close">
   		<property name="driverClass" value="${driverClassName}" />
   		<property name="jdbcUrl" value="${url}" />
   		<property name="username" value="${username}"/>
   		<property name="password" value="${password}"/>
	    <property name="idleConnectionTestPeriod" value="${bonecp.idleConnectionTestPeriod}"/>
	    <property name="idleMaxAge" value="${bonecp.idleMaxAge}"/>
	    <property name="maxConnectionsPerPartition" value="${bonecp.maxConnectionsPerPartition}"/>
	    <property name="minConnectionsPerPartition" value="${bonecp.minConnectionsPerPartition}"/>
	    <property name="partitionCount" value="${bonecp.partitionCount}"/>
	    <property name="acquireIncrement" value="${bonecp.acquireIncrement}"/>
	    <property name="statementCacheSize" value="${bonecp.statementCacheSize}"/>
	    <property name="releaseHelperThreads" value="${bonecp.releaseHelperThreads}"/>
	</bean>
	
	<!-- C3P0数据源配置 -->
	<bean id="dataSourceC3P0CP" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
	    <property name="driverClass" value="${driverClassName}"></property>
    	<property name="jdbcUrl" value="${url}"></property>
    	<property name="user" value="${username}"></property>
   		<property name="password" value="${password}"></property>
    	<property name="initialPoolSize" value="${c3p0.initialPoolSize}"></property>
    	<property name="minPoolSize" value="${c3p0.minPoolSize}"></property>
   	 	<property name="maxPoolSize" value="${c3p0.maxPoolSize}"></property>
    	<property name="maxIdleTime" value="${c3p0.maxIdleTime}"></property>
    	<property name="acquireIncrement" value="${c3p0.acquireIncrement}"></property>
    	<property name="idleConnectionTestPeriod" value="${c3p0.idleConnectionTestPeriod}"></property>
    	<property name="acquireRetryAttempts" value="${c3p0.acquireRetryAttempts}"></property>
    	<property name="breakAfterAcquireFailure" value="${c3p0.breakAfterAcquireFailure}"></property>
    	<property name="maxStatements" value="${c3p0.maxStatements}"></property>
    	<property name="testConnectionOnCheckout" value="${c3p0.testConnectionOnCheckout}"></property>
 	</bean>

	<!-- SessionFactory配置 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref bean="${defaultDs}" />
		</property>
<!--		<property name="lobHandler">-->
<!--          	<ref bean="oracleLobHandler" />-->
<!--     	</property>-->
		<property name="hibernateProperties">
			<props>
<!--			<prop key="hibernate.default_schema">${hibernate.default_schema}</prop>-->
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.query.factory_class">${hibernate.query.factory_class}</prop>
				<prop key="cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
<!--				<prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>-->
				<!-- 由于spring也使用了Ehcache, 保证双方都使用同一个缓存管理器 -->  
				<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
				<prop key="hibernate.cache.provider_configuration_file_resource_path">classpath*:ehcache/ehcache.xml</prop>
<!--			<prop key="hibernate.cache.provider_class">org.hibernate.cache.OSCacheProvider</prop> -->
				<prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>  
				<prop key="hibernate.current_session_context_class">${hibernate.current_session_context_class}</prop>
<!--			<prop key="hibernate.bytecode.use_reflection_optimizer">${hibernate.bytecode.use_reflection_optimizer}</prop>-->
			</props>
			<!-- 
				hibernate.current_session_context_class 是hibernate 4使用session事物的模式
				1: org.hibernate.context.internal.ThreadLocalSessionContext - 当前session通过当前执行的线程来跟踪和界定。
				2: org.hibernate.context.internal.JTASessionContext- 当前session根据JTA来跟踪和界定。这和以前的仅支持JTA的方法是完全一样的。
				3：org.hibernate.context.internal.ManagedSessionContext
				使用spring时 默认是 ，用spring的事务管理 则用org.springframework.orm.hibernate4.SpringSessionContext
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key="hibernate.cache.provider_class">org.hibernate.cache.internal.NoCacheProvider</prop>
				<prop key="hibernate.proxool.pool_alias">myDataSource</prop>
			    <prop key="hibernate.proxool.xml">proxool.xml</prop>
			    org.hibernate.cache.EhCacheProvider
			    <prop key="hibernate.connection.provider_class">org.hibernate.service.jdbc.connections.internal.ProxoolConnectionProvider</prop>
			    <prop key="hibernate.cache.provider_class">net.sf.ehcache.hibernate.EhCacheProvider</prop> 
                <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
                <prop key="hibernate.search.default.directory_provider">org.hibernate.search.store.FSDirectoryProvider</prop>
                <prop key="hibernate.search.default.indexBase">H:\indexed</prop> 
                hibernate 3.3以上
                <property name="hibernate.cache.region.factory_class">net.sf.ehcache.hibernate.EhCacheRegionFactory</property>
                                                或
                <property name="hibernate.cache.region.factory_class">net.sf.ehcache.hibernate.SingletonEhCacheRegionFactory</property>
                Hibernate 3.0-3.2
                <property name="hibernate.cache.provider_class">net.sf.ehcache.hibernate.EhCacheProvider</property>
                                                或
                <property name="hibernate.cache.provider_class">net.sf.ehcache.hibernate.SingletonEhCacheProvider</property>
			    -->
		</property>
		<!-- 
		<property name="configurationClass">
			<value>org.hibernate.cfg.AnnotationConfiguration</value>
		</property>
		-->
		<property name="packagesToScan">
			<list>
				<value>org.platform.entity</value>
				<value>org.platform.modules.**.entity</value>
			</list>
		</property>
		<!-- 
		<property name="mappingLocations">
			<list>
				<value>classpath:jbpm.execution.hbm.xml</value>
				<value>classpath:jbpm.history.hbm.xml</value>
				<value>classpath:jbpm.identity.hbm.xml</value>
				<value>classpath:jbpm.repository.hbm.xml</value>
				<value>classpath:jbpm.task.hbm.xml</value>
			</list>
		</property>
		-->
	</bean>
	
	<bean id="localSessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"
		abstract="false" scope="singleton" lazy-init="default" autowire="default">
		<property name="dataSource" ref="${defaultDs}" />
		<!--
		<property name="lobHandler" ref="oracleLobHandler" />
		<property name="schemaUpdate" value="false" />
		-->
		<property name="hibernateProperties">
			<props>
				<!--			
				<prop key="hibernate.default_schema">${hibernate.default_schema}</prop>
				-->
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.current_session_context_class">${hibernate.current_session_context_class}</prop>
			</props>
		</property>
		<!--  
		<property name="mappingDirectoryLocations"> 
			<list>   
				<value>classpath:org/platform/entity</value> 
				<value>classpath:org/platform/modules/**/entity</value> 
			</list>
		</property>
		-->
	</bean>
	
	<!-- 事务配置 -->
	<!-- TX标签事务配置 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<bean id="transactionManagerDS" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="${defaultDs}" />  
	</bean>
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="start*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="load*" propagation="REQUIRED" read-only="true" />
			<tx:method name="read*" propagation="REQUIRED" read-only="true" />
			<tx:method name="select*" propagation="REQUIRED" read-only="true" />
		</tx:attributes>
	</tx:advice>
	
	<!-- 	
	<aop:config expose-proxy="true">   
	-->
	<aop:config>  
       <aop:pointcut id="interceptorPointCuts"  
           expression="(execution(* org.platform.modules.*.biz.impl.*.*(..))) or
           			   (execution(* org.platform.modules.*.service.impl.*.*(..)))" />  
       <aop:advisor advice-ref="txAdvice"  
           pointcut-ref="interceptorPointCuts" />          
    </aop:config>   
    
    <tx:advice id="txAdviceIBatis" transaction-manager="transactionManagerDS">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="load*" propagation="REQUIRED" read-only="true" />
			<tx:method name="read*" propagation="REQUIRED" read-only="true" />
			<tx:method name="select*" propagation="REQUIRED" read-only="true" />
		</tx:attributes>
	</tx:advice>
	
	<aop:config>  
       <aop:pointcut id="interceptorPointCutsIBatis"  
           expression="(execution(* org.platform.modules.*.biz.impl.*.*(..))) or
           			   (execution(* org.platform.modules.*.service.impl.*.*(..)))" />  
       <aop:advisor advice-ref="txAdviceIBatis"  
           pointcut-ref="interceptorPointCutsIBatis" />          
    </aop:config>       
	
	<!-- 拦截器事务配置 -->
	<!-- 
	<bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">   
       <property name="transactionManager" ref="transactionManager" />   
       <property name="transactionAttributes">   
           <props>   
               <prop key="save*">PROPAGATION_REQUIRED</prop>   
               <prop key="update*">PROPAGATION_REQUIRED</prop>   
               <prop key="delete*">PROPAGATION_REQUIRED</prop>   
               <prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>   
               <prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>   
               <prop key="load*">PROPAGATION_REQUIRED,readOnly</prop>   
               <prop key="read*">PROPAGATION_REQUIRED,readOnly</prop>   
           </props>   
       </property>   
   </bean> 
    -->
  
   <bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">   
       <property name="beanNames">   
           <list>   
               <value>*BusinessImpl</value> 
               <value>*ServiceImpl</value> 
           </list>   
       </property>   
       <property name="interceptorNames">   
           <list>   
               <value>transactionInterceptor</value>   
           </list>   
       </property>   
   </bean>   
    
	<!-- JDBC事务配置 -->
	<bean id="jdbcTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource">
			<ref bean="${defaultDs}" />
		</property>
	</bean>

	<!-- 注解事务配置 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- Spring JDBC 配置 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"> 
		 <property name="dataSource"> 
		 	<ref bean="${defaultDs}" /> 
	 	 </property> 
	</bean> 
	
	<!-- 实现@AspectJ注解的 -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	
	<!-- 工作流引擎配置 -->
	<!--  
   <bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration"> 
       <property name="dataSource" ref="${defaultDs}" /> 
       <property name="transactionManager" ref="transactionManager" /> 
       <property name="databaseSchemaUpdate" value="true" /> 
       <property name="jobExecutorActivate" value="false" /> 
       <property name="history" value="full" /> 
   </bean> 

   <bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean" > 
       <property name="processEngineConfiguration" ref="processEngineConfiguration" /> 
   </bean> 

   <bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService" /> 
   <bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService" /> 
   <bean id="formService" factory-bean="processEngine" factory-method="getFormService" /> 
   <bean id="identityService" factory-bean="processEngine" factory-method="getIdentityService" /> 
   <bean id="taskService" factory-bean="processEngine" factory-method="getTaskService" /> 
   <bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService" /> 
   <bean id="managementService" factory-bean="processEngine" factory-method="getManagementService" /> 
   -->
    
    
	<!-- MyBatis 配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="${defaultDs}" />
		<property name="typeAliasesPackage" value="org.platform.modules.abstr.entity,org.platform.modules.auth.entity,org.platform.modules.doc.entity" />
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
		<property name="mapperLocations" value="classpath*:org/platform/modules/*/mapper/**/*.xml" />
	</bean>
	
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
       <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>
    
    <!--  
	<bean id="vendorProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean"> 
       <property name="properties"> 
           <props> 
               <prop key="SQL Server">sqlserver</prop> 
               <prop key="DB2">db2</prop> 
               <prop key="Oracle">oracle</prop> 
               <prop key="MySQL">mysql</prop> 
           </props> 
       </property> 
    </bean> 
  
    <bean id="databaseIdProvider" class="org.apache.ibatis.mapping.VendorDatabaseIdProvider"> 
        <property name="properties" ref="vendorProperties"/> 
    </bean> 
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="platform.module.*.mapper" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory" /> 
	</bean> 
	
	<bean id="mapperFactoryBean" class="org.mybatis.spring.mapper.MapperFactoryBean"> 
	    <property name="sqlSessionFactory" ref="sqlSessionFactory" />
		<property name="mapperInterface" value="platform.module.auth.mapper.UserMapper" />  
	</bean>
	-->

	<!-- 国际化资源 -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">  
        <property name="basenames">  
            <list>  
                <value>locale/messages</value>  
                <value>locale/exception</value>  
            </list>  
        </property>  
        <property name="defaultEncoding" value="UTF-8"/>  
        <property name="cacheSeconds" value="60"/>  
    </bean>  
    
    <!-- Import Resource -->
    <import resource="classpath:spring/applicationContext-cache.xml"/>
    <import resource="classpath:spring/applicationContext-mail.xml"/>
    <import resource="classpath:spring/applicationContext-shiro.xml"/>
    <import resource="classpath:spring/applicationContext-task.xml"/>
    <!-- 
    <import resource="classpath:spring/applicationContext-redis.xml"/>
    <import resource="classpath:spring/applicationContext-mongo.xml"/>
    <import resource="classpath:spring/applicationContext-scheduler.xml"/>
    <import resource="classpath:sprint/applicationContext-cassandra.xml"/>
     -->
	
</beans>